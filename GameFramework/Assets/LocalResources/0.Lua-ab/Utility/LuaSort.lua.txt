---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by boshi.
--- DateTime: 2021/5/21 下午10:43
---
local luaLog = require("LuaLog")
local LuaSort = {}

local _arr

---* 快速排序
function LuaSort.QuitSort(array)
    _arr = array
    LuaSort.QuitSortFun(_arr,1,#_arr)
    return _arr
end

function LuaSort.QuitSortFun(array, left, right)

    if left >= right then
        return
    end

    local temp = array[left]
    local i = left
    local j = right
    while i<j do
        while i<j and array[j]>temp do
            j = j -1
        end
        array[i] = array[j]

        while i<j and array[i]<temp do
            i = i + 1
        end
        array[j] = array[i]
    end

    array[i] = temp
    LuaSort.QuitSortFun(array,left,i-1)
    LuaSort.QuitSortFun(array,i+1,right)
end
---快速排序⬆⬆⬆⬆⬆⬆⬆⬆⬆

---* 堆排序
function LuaSort.HeapSort(array)
    _arr = array
    local length = #_arr
    local startIndex = math.floor(length /2)
    --建堆
    for i = startIndex, 1, -1 do
        LuaSort.Heapify(array, i, length)
    end

    --排序
    for i = length, 1, -1 do
        array[i], array[1] = array[1], array[i]
        LuaSort.Heapify(array, 1, i)
    end
    return _arr
end

---* 维护堆的性质，array：待排序数组，index：当前需要维护的节点的索引，length：数组长度
function LuaSort.Heapify(array, index, length)
    local largestIndex = index
    local leftSonIndex = index*2
    local rightSonIndex = index*2+1

    if leftSonIndex < length and array[leftSonIndex] > array[largestIndex] then
        largestIndex = leftSonIndex
    end
    if rightSonIndex < length and array[rightSonIndex] > array[largestIndex] then
        largestIndex = rightSonIndex
    end

    if largestIndex ~= index then
        array[index], array[largestIndex] = array[largestIndex], array[index]
        LuaSort.Heapify(array, largestIndex, length)
    end

end

--- 堆排序⬆⬆⬆⬆⬆⬆⬆⬆⬆

return LuaSort